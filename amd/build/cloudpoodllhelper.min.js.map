{"version":3,"sources":["../src/cloudpoodllhelper.js"],"names":["define","$","log","cloudpoodll","debug","configs","init","opts","config","component","data_id","inputname","transcriber","uploadstate","name","CSS","escape","controls","mediaurl","transcript","answer","that","gspeech","evt","theconfig","id","type","action","cpquestionStarted","CustomEvent","details","document","dispatchEvent","capturedspeech","val","cpquestionUploaded","alert","message","setup_recorder","recorder_callback","cp","clone","register_controls","register_events"],"mappings":"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","sourcesContent":["define([\"jquery\", \"core/log\", \"qtype_cloudpoodll/cloudpoodllloader\"], function ($, log, cloudpoodll) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug(\"cloudpoodll helper: initialising\");\n\n    return {\n\n        configs: {},\n\n        init: function (opts) {\n            var config ={};\n            config.component = opts[\"component\"];\n            config.data_id = opts[\"data_id\"];\n            config.inputname = opts[\"inputname\"];\n            config.transcriber = opts[\"transcriber\"];\n            config.uploadstate= false;\n\n            //register controls\n            var name = CSS.escape(config.inputname);\n            config.controls = {\n                mediaurl: $(\"input[name=\" + name + \"mediaurl]\"),\n                transcript: $(\"input[name=\" + name + \"transcript]\"),\n                answer: $(\"input[name=\" + name + \"]\"),\n            };\n            this.configs[config.data_id] = config;\n            var that=this;\n\n            //setup recorder\n            var gspeech = \"\";\n\n            cloudpoodll.init(config.data_id, function (evt) {\n                var theconfig=that.configs[evt.id];\n                //we need to only do our event (not another recorder on this page)\n                if (!theconfig){return;}\n\n                switch (evt.type) {\n                    case \"recording\":\n                        if (evt.action === \"started\") {\n                            gspeech = \"\";\n                            // post a custom event that a filter template might be interested in\n                            var cpquestionStarted = new CustomEvent(\"cpquestionStarted\", {details: evt});\n                            document.dispatchEvent(cpquestionStarted);\n                        }\n                        break;\n                    case \"speech\":\n                        gspeech += \"  \" + evt.capturedspeech;\n                        theconfig.controls.transcript.val(gspeech);\n                        theconfig.controls.answer.val(gspeech);\n                        break;\n                    case \"awaitingprocessing\":\n                        if (theconfig.uploadstate != \"posted\") {\n                            theconfig.controls.mediaurl.val(evt.mediaurl);\n                            theconfig.controls.answer.val(evt.mediaurl);\n\n                            // post a custom event that a filter template might be interested in\n                            var cpquestionUploaded = new CustomEvent(\"cpquestionUploaded\", {details: evt});\n                            document.dispatchEvent(cpquestionUploaded);\n                        }\n                        theconfig.uploadstate = \"posted\";\n                        break;\n                    case \"error\":\n                        alert(\"PROBLEM: \" + evt.message);\n                        break;\n                }\n            }//end of callback function\n\n            );//end of cp init\n\n            //defunct\n            //config = this.register_controls(config);\n            //this.setup_recorder(config);\n        },\n\n        setup_recorder: function (config) {\n            var gspeech = \"\";\n            var recorder_callback = function (evt) {\n                switch (evt.type) {\n                    case \"recording\":\n                        if (evt.action === \"started\") {\n                            gspeech = \"\";\n                            // that.controls.updatecontrol.val();\n                        }\n                        break;\n                    case \"speech\":\n                        gspeech += \"  \" + evt.capturedspeech;\n                        config.controls.transcript.val(gspeech);\n                        config.controls.answer.val(gspeech);\n                        break;\n                    case \"awaitingprocessing\":\n                        if (config.uploadstate != \"posted\") {\n                            config.controls.mediaurl.val(evt.mediaurl);\n                            config.controls.answer.val(evt.mediaurl);\n                        }\n                        config.uploadstate = \"posted\";\n                        break;\n                    case \"error\":\n                        alert(\"PROBLEM: \" + evt.message);\n                        break;\n                }\n            };\n            var cp = cloudpoodll.clone();\n            cp.init(config.data_id, recorder_callback);\n        },\n\n        register_controls: function (config) {\n            var name = CSS.escape(config.inputname);\n            config.controls = {\n                mediaurl: $(\"input[name=\" + name + \"mediaurl]\"),\n                transcript: $(\"input[name=\" + name + \"transcript]\"),\n                answer: $(\"input[name=\" + name + \"]\"),\n            };\n            return config;\n        },\n\n        register_events: function (config) {\n            //nothing here\n        }\n    };//end of return object\n});"],"file":"cloudpoodllhelper.min.js"}